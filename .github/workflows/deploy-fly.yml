# This GitHub Actions workflow automates testing and deployment to Fly.io.
# It runs tests on every push and pull request to the main branch.
# If tests pass on a push to main, it deploys the application.
# After deployment, it performs a health check and can automatically roll back on failure.
# Finally, it sends success or failure notifications to Slack and Discord.

name: Deploy to Fly.io

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FLY_APP_NAME: "easycod-dz"

jobs:
  # Job to run tests, linting, and build checks
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Run type checking
        run: npx tsc --noEmit

  # Job to deploy the application to Fly.io
  deploy:
    name: Deploy to Fly.io
    needs: test
    runs-on: ubuntu-latest
    # Run only on push to the main branch, not on pull requests
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        run: |
          flyctl deploy \
            --local-only \
            --regions iad \
            --no-postgres \
            --strategy immediate \
            --verbose

      - name: Wait for deployment to stabilize
        run: sleep 30

      - name: Health check with auto-rollback
        run: |
          echo "üîç Checking production app health..."
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.FLY_APP_NAME }}.fly.dev/ping)
            if [ "$response" = "200" ]; then
              echo "‚úÖ Health check passed on attempt $i"
              break
            else
              echo "‚ùå Health check failed on attempt $i with status: $response"
              if [ $i -eq 5 ]; then
                echo "üö® All health check attempts failed. Initiating automatic rollback..."
                flyctl releases rollback --app ${{ env.FLY_APP_NAME }}
                sleep 30
                # Check if rollback worked
                rollback_response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.FLY_APP_NAME }}.fly.dev/ping)
                if [ "$rollback_response" = "200" ]; then
                  echo "‚úÖ Automatic rollback successful - app is healthy"
                else
                  echo "‚ùå Automatic rollback failed - app is still unhealthy"
                  exit 1
                fi
              else
                echo "‚è≥ Waiting 10 seconds before retry..."
                sleep 10
              fi
            fi
          done

      - name: Show deployment status
        run: |
          flyctl status
          echo "üîó App URL: https://${{ env.FLY_APP_NAME }}.fly.dev"

  # Job to send notifications based on deployment status
  notify:
    name: Notify Deployment Status
    needs: [test, deploy]
    runs-on: ubuntu-latest
    # Always run this job to report success or failure
    if: always()
    
    steps:
      - name: Slack Notification (Success)
        if: needs.deploy.result == 'success' && secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üöÄ *Deployment Successful*
            App: ${{ env.FLY_APP_NAME }}
            Commit: `${{ github.sha }}`
            Author: ${{ github.actor }}
            URL: https://${{ env.FLY_APP_NAME }}.fly.dev

      - name: Slack Notification (Failure)
        if: needs.deploy.result == 'failure' && secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ‚ùå *Deployment Failed*
            App: ${{ env.FLY_APP_NAME }}
            Commit: `${{ github.sha }}`
            Author: ${{ github.actor }}
            Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Discord Notification (Success)
        if: needs.deploy.result == 'success' && secrets.DISCORD_WEBHOOK_URL != ''
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "üöÄ Deployment Successful",
                   "color": 65280,
                   "fields": [
                     {"name": "App", "value": "${{ env.FLY_APP_NAME }}", "inline": true},
                     {"name": "Commit", "value": "`${{ github.sha }}`", "inline": true},
                     {"name": "Author", "value": "${{ github.actor }}", "inline": true},
                     {"name": "URL", "value": "https://${{ env.FLY_APP_NAME }}.fly.dev", "inline": false}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"

      - name: Discord Notification (Failure)
        if: needs.deploy.result == 'failure' && secrets.DISCORD_WEBHOOK_URL != ''
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "‚ùå Deployment Failed",
                   "color": 16711680,
                   "fields": [
                     {"name": "App", "value": "${{ env.FLY_APP_NAME }}", "inline": true},
                     {"name": "Commit", "value": "`${{ github.sha }}`", "inline": true},
                     {"name": "Author", "value": "${{ github.actor }}", "inline": true},
                     {"name": "Logs", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "inline": false}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
